#ACCEPT_OVERRIDE = '*'
ACCEPT_OVERRIDE = null
DEBUG = false

assert = (exp) ->
  throw 'Runtime error' unless exp

p = (exp) ->
  console.log(exp)

set_position = (element_or_selector, left, top) ->
  $(element_or_selector).css
    left: "#{left}px"
    top: "#{top}px"

Array.prototype.last = ->
  this[this.length - 1]

# This can't be right?
remove_from_array = (array, items...) ->
  for item in items
    while item in array
      array.splice(_.indexOf(array, item), 1)

ACE = 0
KING = 12

FIRST_ROW = 20
SECOND_ROW = 250
FIRST_COLUMN = 20
CARD_WIDTH = 79
CARD_HEIGHT = 123
VERTICAL_FANNING_OFFSET = 20
HORIZONTAL_FANNING_OFFSET = 20
COLUMN_OFFSET = CARD_WIDTH + 20

class Card
  @next_id = 0

  constructor: (@rank, @suit, @upturned) ->
    assert @rank? and @suit? and ACE <= rank <= KING and 0 <= suit <= 3 and @upturned?
    @id = "card_#{Card.next_id++}"
    @element = $("<div class=\"card card_#{@rank}_#{@suit}\" id=\"#{@id}\"></div>")
    @update_element()

  update_element: ->
    
    if @upturned
      this.element.css
        backgroundPosition: "-#{@rank * 79}px -#{[0, 3, 2, 1][@suit] * 123}px"
    else
      this.element.css
        backgroundPosition: "-#{2 * 79}px -#{4 * 123}px"

  render_at: (left, top, upturned, z_index = '') ->
    if @upturned != upturned
      @upturned = upturned
      @update_element()
    set_position(@element, left, top)
    @element.css
      'z-index': z_index


class GameState
  constructor: (@game_manager, @deck, @turns) ->
    @canvas_div = @game_manager.canvas_div

  clone: ->
    copy = new GameState(@game_manager, @deck, @turns)
    for array in ['stock', 'waste']
      copy[array] = this[array].slice(0)
    for array in ['foundations', 'downturned_tableaux', 'upturned_tableaux']
      copy[array] = (subarray.slice(0) for subarray in this[array])
    copy

  deal: ->
    @stock = _.shuffle(@deck)
    @waste = []
    @foundations = [[], [], [], []]
    @downturned_tableaux = [[], [], [], [], [], [], []]
    @upturned_tableaux = [[], [], [], [], [], [], []]
    for i in [0...7]
      for j in [i+1...7]
        @downturned_tableaux[j].push(@stock.pop())
      @upturned_tableaux[i].push(@stock.pop())
    @foundation_blank_html = '<div class="card"><div class="blank"></div></div>'
    @render()

  get_card: (element) ->
    for c in @deck
      return c if c.element.attr('id') == element.attr('id')

  # Player Actions
  turn: ->
    @game_manager.undo_stack.push(@clone())
    for i in [0...@turns]
      if @stock.length
        @waste.push(@stock.pop())
    @render()

  redeal: ->
    @game_manager.undo_stack.push(@clone())
    while @waste.length
      @stock.push @waste.pop()
    @render()

  drop_card: (card, target_type, index) ->
    # Drop any legal card on the given foundation or tableau.
    @game_manager.undo_stack.push(@clone())
    assert target_type in ['foundation', 'tableau']
    if card == @waste.last()
      cards = [@waste.pop()]
    else if card in (f.last() for f in @foundations)
      for f in @foundations
        if f.last() == card
          cards = [f.pop()]
    else
      assert card in _.flatten(@upturned_tableaux)
      for t in @upturned_tableaux
        if card in t
          cards = []
          while card in t
            cards.unshift(t.pop()) # ugh
    if target_type == 'foundation'
      assert cards.length == 1
    assert cards.length
    (if target_type == 'foundation' then @foundations else @upturned_tableaux)[index].push(cards...)
    # Upturn next card if necessary
    for t, index in @upturned_tableaux
      if not t.length and @downturned_tableaux[index].length
        t.push(@downturned_tableaux[index].pop())
    setTimeout((=> @render()), 0)

  render: ->
    if not (false in (f.length == 13 for f in @foundations))
      $('#you_win').show()
      $('#you_win').css('z-index', 1000000)
    else
      $('#you_win').hide()
    z_index = 1
    # Tableaux
    for i in [0...@downturned_tableaux.length]
      left = FIRST_COLUMN + COLUMN_OFFSET * i
      top = SECOND_ROW
      set_position("#tableau_#{i}_base", left, top)
      for c, index in @downturned_tableaux[i]
        c.render_at(left, top, false, z_index++)
        top += VERTICAL_FANNING_OFFSET
      for c, index in @upturned_tableaux[i]
        c.render_at(left, top, true, z_index++)
        top += VERTICAL_FANNING_OFFSET
      if @upturned_tableaux[i].length
        top -= VERTICAL_FANNING_OFFSET # place dropzone over last card
      set_position("#tableau_#{i}_dropzone", left, top)
    # Stock
    if @waste.length or @stock.length
      $('#redeal_image').show()
      $('#exhausted_image').hide()
    else
      $('#redeal_image').hide()
      $('#exhausted_image').show()
    left = FIRST_COLUMN
    top = FIRST_ROW
    set_position('#stock_base', left, top)
    for c in @stock
      c.render_at(left, top, false, z_index++)
    # Waste
    left = FIRST_COLUMN + COLUMN_OFFSET
    top = FIRST_ROW
    set_position('#waste_base', left, top)
    for c, index in @waste
      c.render_at(left, top, true, z_index++)
      if index >= @waste.length - @turns
        left += HORIZONTAL_FANNING_OFFSET
    # Foundations
    left = FIRST_COLUMN + 3 * COLUMN_OFFSET
    top = FIRST_ROW
    for foundation, index in @foundations
      set_position("#foundation_#{index}_base", left, top)
      set_position("#foundation_#{index}_dropzone", left, top)
      for c in foundation
        c.render_at(left, top, true, z_index++)
      left += COLUMN_OFFSET

    # Register events
    @canvas_div.off('.solitaire', '**')
    $('.ui-draggable').draggable('destroy')
    # Set playable cards
    $('.playable').removeClass('playable')
    playable_cards = []
    for stack in [@waste].concat(@foundations, @upturned_tableaux)
      if stack.length
        c = stack[stack.length-1]
        c.element.addClass('playable')
        playable_cards.push(c)
    # Click handlers
    if @stock.length
      @canvas_div.on 'click.solitaire', "##{@stock[@stock.length-1].id}", =>
        @turn()
    else if @waste.length
      @canvas_div.on 'click.solitaire', "#redeal_image", =>
        @redeal()
    # Double-click handlers
    for c in [@waste.last()].concat(t.last() for t in @upturned_tableaux)
      continue unless c
      ((c) =>
        @canvas_div.on 'dblclick.solitaire', "##{c.id}", (event) =>
          # Sometimes we have double-clicks firing on the top waste card after
          # repeatedly clicking the stock; checking for negative offsets
          # filters them most of the time.
          return if event.offsetX < 0 or event.offsetY < 0
          if c.rank == ACE
            @drop_card(c, 'foundation', _.indexOf((f.length for f in @foundations), 0))
          else
            for f, index in @foundations
              if f.last() and f.last().suit == c.suit and f.last().rank == c.rank - 1
                @drop_card(c, 'foundation', index)
      )(c)
    # Drag handlers
    make_draggable = (element, dropzone_to_disable) =>
      # Make the element draggable. Also, disable the dropzone specified when
      # the dragging starts.
      element.draggable
        # Should we define the face/back as a handle?
        #cancel: "##{card.element.attr('id')} .card" # nested cards are not draggable
        revert: 'invalid'
        revertDuration: 200
        stack: '.card'
        start: =>
          if dropzone_to_disable
            $(dropzone_to_disable).droppable('destroy')
        stop: =>
          setTimeout((=> @render()), 0)
    for f, index in @foundations
      if f.length
        e = f[f.length-1].element
        make_draggable(e, "#foundation_#{index}_dropzone")
    if @waste.length
      e = @waste[@waste.length-1].element
      make_draggable(e, null)
    for t, tableau_index in @upturned_tableaux
      for c, card_index in t
        make_draggable(c.element, "#tableau_#{tableau_index}_dropzone")
    # Dropzones
    make_droppable = (target_type, index, accept) =>
      dropzone = $("##{target_type}_#{index}_dropzone")
      assert dropzone.length
      dropzone.html(accept) if DEBUG
      dropzone.droppable
        tolerance: 'touch'
        accept: ACCEPT_OVERRIDE || accept
        drop: (event, ui) =>
          card = @get_card(ui.draggable)
          @drop_card(card, target_type, index)
    for f, index in @foundations
      if f.length
        c = f[f.length-1]
        continue if c.rank == KING
        accept = ".playable.card_#{c.rank+1}_#{c.suit}"
      else
        accept = ".playable.card_0_0, .playable.card_0_1, .playable.card_0_2, .playable.card_0_3"
      make_droppable('foundation', index, accept)
    for t, index in @upturned_tableaux
      if t.length
        c = t.last()
        continue if c.rank == ACE
        if c.suit in [0, 1]
          accept = ".card_#{c.rank-1}_2, .card_#{c.rank-1}_3"
        else
          accept = ".card_#{c.rank-1}_0, .card_#{c.rank-1}_1"
      else
        accept = ".card_#{KING}_0, .card_#{KING}_1, .card_#{KING}_2, .card_#{KING}_3"
      make_droppable('tableau', index, accept)

class GameManager
  constructor: (@canvas_div) ->
    @deck = _.flatten(new Card(r, s, false) for r in [ACE..KING] for s in [0..3])
    @undo_stack = []
    for c in @deck
      @canvas_div.append(c.element)

  new_game: (turns) ->
    @undo_stack = []
    @game_state = new GameState(this, @deck, turns)
    @game_state.deal()

  undo: ->
    if @undo_stack.length
      @game_state = @undo_stack.pop()
      @game_state.render()

$ ->
  game_manager = new GameManager($('#solitaire_canvas'))
  game_manager.new_game(1)
  $('#undo_button').on 'click', =>
    game_manager.undo()
  $('#new_game_button_1').on 'click', =>
    game_manager.new_game(1)
  $('#new_game_button_2').on 'click', =>
    game_manager.new_game(3)
  $('body').disableSelection()
